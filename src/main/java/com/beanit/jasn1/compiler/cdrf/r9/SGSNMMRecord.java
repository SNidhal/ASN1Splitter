/**
 * This class file was automatically generated by jASN1 (http://www.beanit.com)
 */

package com.beanit.jasn1.compiler.cdrf.r9;

import com.beanit.jasn1.ber.BerLength;
import com.beanit.jasn1.ber.BerTag;
import com.beanit.jasn1.ber.ReverseByteArrayOutputStream;
import com.beanit.jasn1.ber.types.BerInteger;
import com.beanit.jasn1.ber.types.BerType;

import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.Serializable;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;


public class SGSNMMRecord implements BerType, Serializable {

	private static final long serialVersionUID = 1L;

	public static class ChangeLocation implements BerType, Serializable {

		private static final long serialVersionUID = 1L;

		public static final BerTag tag = new BerTag(BerTag.UNIVERSAL_CLASS, BerTag.CONSTRUCTED, 16);
		public byte[] code = null;
		private List<com.beanit.jasn1.compiler.cdrf.r9.ChangeLocation> seqOf = null;

		public ChangeLocation() {
			seqOf = new ArrayList<com.beanit.jasn1.compiler.cdrf.r9.ChangeLocation>();
		}

		public ChangeLocation(byte[] code) {
			this.code = code;
		}

		public List<com.beanit.jasn1.compiler.cdrf.r9.ChangeLocation> getChangeLocation() {
			if (seqOf == null) {
				seqOf = new ArrayList<com.beanit.jasn1.compiler.cdrf.r9.ChangeLocation>();
			}
			return seqOf;
		}

		public int encode(OutputStream reverseOS) throws IOException {
			return encode(reverseOS, true);
		}

		public int encode(OutputStream reverseOS, boolean withTag) throws IOException {

			if (code != null) {
				for (int i = code.length - 1; i >= 0; i--) {
					reverseOS.write(code[i]);
				}
				if (withTag) {
					return tag.encode(reverseOS) + code.length;
				}
				return code.length;
			}

			int codeLength = 0;
			for (int i = (seqOf.size() - 1); i >= 0; i--) {
				codeLength += seqOf.get(i).encode(reverseOS, true);
			}

			codeLength += BerLength.encodeLength(reverseOS, codeLength);

			if (withTag) {
				codeLength += tag.encode(reverseOS);
			}

			return codeLength;
		}

		public int decode(InputStream is) throws IOException {
			return decode(is, true);
		}

		public int decode(InputStream is, boolean withTag) throws IOException {
			int codeLength = 0;
			int subCodeLength = 0;
			if (withTag) {
				codeLength += tag.decodeAndCheck(is);
			}

			BerLength length = new BerLength();
			codeLength += length.decode(is);
			int totalLength = length.val;

			while (subCodeLength < totalLength) {
				com.beanit.jasn1.compiler.cdrf.r9.ChangeLocation element = new com.beanit.jasn1.compiler.cdrf.r9.ChangeLocation();
				subCodeLength += element.decode(is, true);
				seqOf.add(element);
			}
			if (subCodeLength != totalLength) {
				throw new IOException("Decoded SequenceOf or SetOf has wrong length. Expected " + totalLength + " but has " + subCodeLength);

			}
			codeLength += subCodeLength;

			return codeLength;
		}

		public void encodeAndSave(int encodingSizeGuess) throws IOException {
			ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
			encode(reverseOS, false);
			code = reverseOS.getArray();
		}

		public String toString() {
			StringBuilder sb = new StringBuilder();
			appendAsString(sb, 0);
			return sb.toString();
		}

		public void appendAsString(StringBuilder sb, int indentLevel) {

			sb.append("{\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			if (seqOf == null) {
				sb.append("null");
			}
			else {
				Iterator<com.beanit.jasn1.compiler.cdrf.r9.ChangeLocation> it = seqOf.iterator();
				if (it.hasNext()) {
					it.next().appendAsString(sb, indentLevel + 1);
					while (it.hasNext()) {
						sb.append(",\n");
						for (int i = 0; i < indentLevel + 1; i++) {
							sb.append("\t");
						}
						it.next().appendAsString(sb, indentLevel + 1);
					}
				}
			}

			sb.append("\n");
			for (int i = 0; i < indentLevel; i++) {
				sb.append("\t");
			}
			sb.append("}");
		}

	}

	public static final BerTag tag = new BerTag(BerTag.UNIVERSAL_CLASS, BerTag.CONSTRUCTED, 17);

	public byte[] code = null;
	private CallEventRecordType recordType = null;
	private IMSI servedIMSI = null;
	private IMEI servedIMEI = null;
	private GSNAddress sgsnAddress = null;
	private MSNetworkCapability msNetworkCapability = null;
	private RoutingAreaCode routingArea = null;
	private LocationAreaCode locationAreaCode = null;
	private CellId cellIdentifier = null;
	private ChangeLocation changeLocation = null;
	private TimeStamp recordOpeningTime = null;
	private CallDuration duration = null;
	private SGSNChange sgsnChange = null;
	private CauseForRecClosing causeForRecClosing = null;
	private Diagnostics diagnostics = null;
	private BerInteger recordSequenceNumber = null;
	private NodeID nodeID = null;
	private ManagementExtensions recordExtensions = null;
	private LocalSequenceNumber localSequenceNumber = null;
	private MSISDN servedMSISDN = null;
	private ChargingCharacteristics chargingCharacteristics = null;
	private CAMELInformationMM cAMELInformationMM = null;
	private RATType rATType = null;
	private ChChSelectionMode chChSelectionMode = null;
	private PLMNId cellPLMNId = null;
	
	public SGSNMMRecord() {
	}

	public SGSNMMRecord(byte[] code) {
		this.code = code;
	}

	public void setRecordType(CallEventRecordType recordType) {
		this.recordType = recordType;
	}

	public CallEventRecordType getRecordType() {
		return recordType;
	}

	public void setServedIMSI(IMSI servedIMSI) {
		this.servedIMSI = servedIMSI;
	}

	public IMSI getServedIMSI() {
		return servedIMSI;
	}

	public void setServedIMEI(IMEI servedIMEI) {
		this.servedIMEI = servedIMEI;
	}

	public IMEI getServedIMEI() {
		return servedIMEI;
	}

	public void setSgsnAddress(GSNAddress sgsnAddress) {
		this.sgsnAddress = sgsnAddress;
	}

	public GSNAddress getSgsnAddress() {
		return sgsnAddress;
	}

	public void setMsNetworkCapability(MSNetworkCapability msNetworkCapability) {
		this.msNetworkCapability = msNetworkCapability;
	}

	public MSNetworkCapability getMsNetworkCapability() {
		return msNetworkCapability;
	}

	public void setRoutingArea(RoutingAreaCode routingArea) {
		this.routingArea = routingArea;
	}

	public RoutingAreaCode getRoutingArea() {
		return routingArea;
	}

	public void setLocationAreaCode(LocationAreaCode locationAreaCode) {
		this.locationAreaCode = locationAreaCode;
	}

	public LocationAreaCode getLocationAreaCode() {
		return locationAreaCode;
	}

	public void setCellIdentifier(CellId cellIdentifier) {
		this.cellIdentifier = cellIdentifier;
	}

	public CellId getCellIdentifier() {
		return cellIdentifier;
	}

	public void setChangeLocation(ChangeLocation changeLocation) {
		this.changeLocation = changeLocation;
	}

	public ChangeLocation getChangeLocation() {
		return changeLocation;
	}

	public void setRecordOpeningTime(TimeStamp recordOpeningTime) {
		this.recordOpeningTime = recordOpeningTime;
	}

	public TimeStamp getRecordOpeningTime() {
		return recordOpeningTime;
	}

	public void setDuration(CallDuration duration) {
		this.duration = duration;
	}

	public CallDuration getDuration() {
		return duration;
	}

	public void setSgsnChange(SGSNChange sgsnChange) {
		this.sgsnChange = sgsnChange;
	}

	public SGSNChange getSgsnChange() {
		return sgsnChange;
	}

	public void setCauseForRecClosing(CauseForRecClosing causeForRecClosing) {
		this.causeForRecClosing = causeForRecClosing;
	}

	public CauseForRecClosing getCauseForRecClosing() {
		return causeForRecClosing;
	}

	public void setDiagnostics(Diagnostics diagnostics) {
		this.diagnostics = diagnostics;
	}

	public Diagnostics getDiagnostics() {
		return diagnostics;
	}

	public void setRecordSequenceNumber(BerInteger recordSequenceNumber) {
		this.recordSequenceNumber = recordSequenceNumber;
	}

	public BerInteger getRecordSequenceNumber() {
		return recordSequenceNumber;
	}

	public void setNodeID(NodeID nodeID) {
		this.nodeID = nodeID;
	}

	public NodeID getNodeID() {
		return nodeID;
	}

	public void setRecordExtensions(ManagementExtensions recordExtensions) {
		this.recordExtensions = recordExtensions;
	}

	public ManagementExtensions getRecordExtensions() {
		return recordExtensions;
	}

	public void setLocalSequenceNumber(LocalSequenceNumber localSequenceNumber) {
		this.localSequenceNumber = localSequenceNumber;
	}

	public LocalSequenceNumber getLocalSequenceNumber() {
		return localSequenceNumber;
	}

	public void setServedMSISDN(MSISDN servedMSISDN) {
		this.servedMSISDN = servedMSISDN;
	}

	public MSISDN getServedMSISDN() {
		return servedMSISDN;
	}

	public void setChargingCharacteristics(ChargingCharacteristics chargingCharacteristics) {
		this.chargingCharacteristics = chargingCharacteristics;
	}

	public ChargingCharacteristics getChargingCharacteristics() {
		return chargingCharacteristics;
	}

	public void setCAMELInformationMM(CAMELInformationMM cAMELInformationMM) {
		this.cAMELInformationMM = cAMELInformationMM;
	}

	public CAMELInformationMM getCAMELInformationMM() {
		return cAMELInformationMM;
	}

	public void setRATType(RATType rATType) {
		this.rATType = rATType;
	}

	public RATType getRATType() {
		return rATType;
	}

	public void setChChSelectionMode(ChChSelectionMode chChSelectionMode) {
		this.chChSelectionMode = chChSelectionMode;
	}

	public ChChSelectionMode getChChSelectionMode() {
		return chChSelectionMode;
	}

	public void setCellPLMNId(PLMNId cellPLMNId) {
		this.cellPLMNId = cellPLMNId;
	}

	public PLMNId getCellPLMNId() {
		return cellPLMNId;
	}

	public int encode(OutputStream reverseOS) throws IOException {
		return encode(reverseOS, true);
	}

	public int encode(OutputStream reverseOS, boolean withTag) throws IOException {

		if (code != null) {
			for (int i = code.length - 1; i >= 0; i--) {
				reverseOS.write(code[i]);
			}
			if (withTag) {
				return tag.encode(reverseOS) + code.length;
			}
			return code.length;
		}

		int codeLength = 0;
		int sublength;

		if (cellPLMNId != null) {
			codeLength += cellPLMNId.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 23
			reverseOS.write(0x97);
			codeLength += 1;
		}
		
		if (chChSelectionMode != null) {
			codeLength += chChSelectionMode.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 22
			reverseOS.write(0x96);
			codeLength += 1;
		}
		
		if (rATType != null) {
			codeLength += rATType.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 21
			reverseOS.write(0x95);
			codeLength += 1;
		}
		
		if (cAMELInformationMM != null) {
			codeLength += cAMELInformationMM.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 20
			reverseOS.write(0xB4);
			codeLength += 1;
		}
		
		codeLength += chargingCharacteristics.encode(reverseOS, false);
		// write tag: CONTEXT_CLASS, PRIMITIVE, 19
		reverseOS.write(0x93);
		codeLength += 1;
		
		if (servedMSISDN != null) {
			codeLength += servedMSISDN.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 18
			reverseOS.write(0x92);
			codeLength += 1;
		}
		
		if (localSequenceNumber != null) {
			codeLength += localSequenceNumber.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 17
			reverseOS.write(0x91);
			codeLength += 1;
		}
		
		if (recordExtensions != null) {
			codeLength += recordExtensions.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 16
			reverseOS.write(0xB0);
			codeLength += 1;
		}
		
		if (nodeID != null) {
			codeLength += nodeID.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 15
			reverseOS.write(0x8F);
			codeLength += 1;
		}
		
		if (recordSequenceNumber != null) {
			codeLength += recordSequenceNumber.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 14
			reverseOS.write(0x8E);
			codeLength += 1;
		}
		
		if (diagnostics != null) {
			sublength = diagnostics.encode(reverseOS);
			codeLength += sublength;
			codeLength += BerLength.encodeLength(reverseOS, sublength);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 13
			reverseOS.write(0xAD);
			codeLength += 1;
		}
		
		codeLength += causeForRecClosing.encode(reverseOS, false);
		// write tag: CONTEXT_CLASS, PRIMITIVE, 12
		reverseOS.write(0x8C);
		codeLength += 1;
		
		if (sgsnChange != null) {
			codeLength += sgsnChange.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 11
			reverseOS.write(0x8B);
			codeLength += 1;
		}
		
		if (duration != null) {
			codeLength += duration.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 10
			reverseOS.write(0x8A);
			codeLength += 1;
		}
		
		codeLength += recordOpeningTime.encode(reverseOS, false);
		// write tag: CONTEXT_CLASS, PRIMITIVE, 9
		reverseOS.write(0x89);
		codeLength += 1;
		
		if (changeLocation != null) {
			codeLength += changeLocation.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 8
			reverseOS.write(0xA8);
			codeLength += 1;
		}
		
		if (cellIdentifier != null) {
			codeLength += cellIdentifier.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 7
			reverseOS.write(0x87);
			codeLength += 1;
		}
		
		if (locationAreaCode != null) {
			codeLength += locationAreaCode.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 6
			reverseOS.write(0x86);
			codeLength += 1;
		}
		
		if (routingArea != null) {
			codeLength += routingArea.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 5
			reverseOS.write(0x85);
			codeLength += 1;
		}
		
		if (msNetworkCapability != null) {
			codeLength += msNetworkCapability.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 4
			reverseOS.write(0x84);
			codeLength += 1;
		}
		
		if (sgsnAddress != null) {
			sublength = sgsnAddress.encode(reverseOS);
			codeLength += sublength;
			codeLength += BerLength.encodeLength(reverseOS, sublength);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 3
			reverseOS.write(0xA3);
			codeLength += 1;
		}
		
		if (servedIMEI != null) {
			codeLength += servedIMEI.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 2
			reverseOS.write(0x82);
			codeLength += 1;
		}
		
		codeLength += servedIMSI.encode(reverseOS, false);
		// write tag: CONTEXT_CLASS, PRIMITIVE, 1
		reverseOS.write(0x81);
		codeLength += 1;
		
		codeLength += recordType.encode(reverseOS, false);
		// write tag: CONTEXT_CLASS, PRIMITIVE, 0
		reverseOS.write(0x80);
		codeLength += 1;
		
		codeLength += BerLength.encodeLength(reverseOS, codeLength);

		if (withTag) {
			codeLength += tag.encode(reverseOS);
		}

		return codeLength;

	}

	public int decode(InputStream is) throws IOException {
		return decode(is, true);
	}

	public int decode(InputStream is, boolean withTag) throws IOException {
		int codeLength = 0;
		int subCodeLength = 0;
		BerTag berTag = new BerTag();

		if (withTag) {
			codeLength += tag.decodeAndCheck(is);
		}

		BerLength length = new BerLength();
		codeLength += length.decode(is);

		int totalLength = length.val;
		while (subCodeLength < totalLength) {
			subCodeLength += berTag.decode(is);
			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 0)) {
				recordType = new CallEventRecordType();
				subCodeLength += recordType.decode(is, false);
			}
			else if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 1)) {
				servedIMSI = new IMSI();
				subCodeLength += servedIMSI.decode(is, false);
			}
			else if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 2)) {
				servedIMEI = new IMEI();
				subCodeLength += servedIMEI.decode(is, false);
			}
			else if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 3)) {
				subCodeLength += new BerLength().decode(is);
				sgsnAddress = new GSNAddress();
				subCodeLength += sgsnAddress.decode(is, null);
			}
			else if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 4)) {
				msNetworkCapability = new MSNetworkCapability();
				subCodeLength += msNetworkCapability.decode(is, false);
			}
			else if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 5)) {
				routingArea = new RoutingAreaCode();
				subCodeLength += routingArea.decode(is, false);
			}
			else if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 6)) {
				locationAreaCode = new LocationAreaCode();
				subCodeLength += locationAreaCode.decode(is, false);
			}
			else if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 7)) {
				cellIdentifier = new CellId();
				subCodeLength += cellIdentifier.decode(is, false);
			}
			else if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 8)) {
				changeLocation = new ChangeLocation();
				subCodeLength += changeLocation.decode(is, false);
			}
			else if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 9)) {
				recordOpeningTime = new TimeStamp();
				subCodeLength += recordOpeningTime.decode(is, false);
			}
			else if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 10)) {
				duration = new CallDuration();
				subCodeLength += duration.decode(is, false);
			}
			else if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 11)) {
				sgsnChange = new SGSNChange();
				subCodeLength += sgsnChange.decode(is, false);
			}
			else if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 12)) {
				causeForRecClosing = new CauseForRecClosing();
				subCodeLength += causeForRecClosing.decode(is, false);
			}
			else if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 13)) {
				subCodeLength += new BerLength().decode(is);
				diagnostics = new Diagnostics();
				subCodeLength += diagnostics.decode(is, null);
			}
			else if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 14)) {
				recordSequenceNumber = new BerInteger();
				subCodeLength += recordSequenceNumber.decode(is, false);
			}
			else if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 15)) {
				nodeID = new NodeID();
				subCodeLength += nodeID.decode(is, false);
			}
			else if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 16)) {
				recordExtensions = new ManagementExtensions();
				subCodeLength += recordExtensions.decode(is, false);
			}
			else if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 17)) {
				localSequenceNumber = new LocalSequenceNumber();
				subCodeLength += localSequenceNumber.decode(is, false);
			}
			else if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 18)) {
				servedMSISDN = new MSISDN();
				subCodeLength += servedMSISDN.decode(is, false);
			}
			else if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 19)) {
				chargingCharacteristics = new ChargingCharacteristics();
				subCodeLength += chargingCharacteristics.decode(is, false);
			}
			else if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 20)) {
				cAMELInformationMM = new CAMELInformationMM();
				subCodeLength += cAMELInformationMM.decode(is, false);
			}
			else if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 21)) {
				rATType = new RATType();
				subCodeLength += rATType.decode(is, false);
			}
			else if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 22)) {
				chChSelectionMode = new ChChSelectionMode();
				subCodeLength += chChSelectionMode.decode(is, false);
			}
			else if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 23)) {
				cellPLMNId = new PLMNId();
				subCodeLength += cellPLMNId.decode(is, false);
			}
		}
		if (subCodeLength != totalLength) {
			throw new IOException("Length of set does not match length tag, length tag: " + totalLength + ", actual set length: " + subCodeLength);

		}
		codeLength += subCodeLength;

		return codeLength;
	}

	public void encodeAndSave(int encodingSizeGuess) throws IOException {
		ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
		encode(reverseOS, false);
		code = reverseOS.getArray();
	}

	public String toString() {
		StringBuilder sb = new StringBuilder();
		appendAsString(sb, 0);
		return sb.toString();
	}

	public void appendAsString(StringBuilder sb, int indentLevel) {

		sb.append("{");
		sb.append("\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (recordType != null) {
			sb.append("recordType: ").append(recordType);
		}
		else {
			sb.append("recordType: <empty-required-field>");
		}
		
		sb.append(",\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (servedIMSI != null) {
			sb.append("servedIMSI: ").append(servedIMSI);
		}
		else {
			sb.append("servedIMSI: <empty-required-field>");
		}
		
		if (servedIMEI != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("servedIMEI: ").append(servedIMEI);
		}
		
		if (sgsnAddress != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("sgsnAddress: ");
			sgsnAddress.appendAsString(sb, indentLevel + 1);
		}
		
		if (msNetworkCapability != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("msNetworkCapability: ").append(msNetworkCapability);
		}
		
		if (routingArea != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("routingArea: ").append(routingArea);
		}
		
		if (locationAreaCode != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("locationAreaCode: ").append(locationAreaCode);
		}
		
		if (cellIdentifier != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("cellIdentifier: ").append(cellIdentifier);
		}
		
		if (changeLocation != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("changeLocation: ");
			changeLocation.appendAsString(sb, indentLevel + 1);
		}
		
		sb.append(",\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (recordOpeningTime != null) {
			sb.append("recordOpeningTime: ").append(recordOpeningTime);
		}
		else {
			sb.append("recordOpeningTime: <empty-required-field>");
		}
		
		if (duration != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("duration: ").append(duration);
		}
		
		if (sgsnChange != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("sgsnChange: ").append(sgsnChange);
		}
		
		sb.append(",\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (causeForRecClosing != null) {
			sb.append("causeForRecClosing: ").append(causeForRecClosing);
		}
		else {
			sb.append("causeForRecClosing: <empty-required-field>");
		}
		
		if (diagnostics != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("diagnostics: ");
			diagnostics.appendAsString(sb, indentLevel + 1);
		}
		
		if (recordSequenceNumber != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("recordSequenceNumber: ").append(recordSequenceNumber);
		}
		
		if (nodeID != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("nodeID: ").append(nodeID);
		}
		
		if (recordExtensions != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("recordExtensions: ");
			recordExtensions.appendAsString(sb, indentLevel + 1);
		}
		
		if (localSequenceNumber != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("localSequenceNumber: ").append(localSequenceNumber);
		}
		
		if (servedMSISDN != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("servedMSISDN: ").append(servedMSISDN);
		}
		
		sb.append(",\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (chargingCharacteristics != null) {
			sb.append("chargingCharacteristics: ").append(chargingCharacteristics);
		}
		else {
			sb.append("chargingCharacteristics: <empty-required-field>");
		}
		
		if (cAMELInformationMM != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("cAMELInformationMM: ");
			cAMELInformationMM.appendAsString(sb, indentLevel + 1);
		}
		
		if (rATType != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("rATType: ").append(rATType);
		}
		
		if (chChSelectionMode != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("chChSelectionMode: ").append(chChSelectionMode);
		}
		
		if (cellPLMNId != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("cellPLMNId: ").append(cellPLMNId);
		}
		
		sb.append("\n");
		for (int i = 0; i < indentLevel; i++) {
			sb.append("\t");
		}
		sb.append("}");
	}

}


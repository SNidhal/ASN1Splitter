/**
 * This class file was automatically generated by jASN1 (http://www.beanit.com)
 */

package com.beanit.jasn1.compiler.cdrf.r9;

import com.beanit.jasn1.ber.BerLength;
import com.beanit.jasn1.ber.BerTag;
import com.beanit.jasn1.ber.ReverseByteArrayOutputStream;
import com.beanit.jasn1.ber.types.BerBoolean;
import com.beanit.jasn1.ber.types.BerType;

import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.Serializable;


public class MBMSInformation implements BerType, Serializable {

	private static final long serialVersionUID = 1L;

	public static final BerTag tag = new BerTag(BerTag.UNIVERSAL_CLASS, BerTag.CONSTRUCTED, 17);

	public byte[] code = null;
	private TMGI tmgi = null;
	private MBMSSessionIdentity mbmsSessionIdentity = null;
	private MBMSServiceType mbmsServiceType = null;
	private MBMSUserServiceType mbmsUserServiceType = null;
	private MBMS2G3GIndicator mbms2G3GIndicator = null;
	private BerBoolean fileRepairSupported = null;
	private RoutingAreaCode rAI = null;
	private MBMSServiceArea mbmsServiceArea = null;
	private RequiredMBMSBearerCapabilities requiredMBMSBearerCaps = null;
	
	public MBMSInformation() {
	}

	public MBMSInformation(byte[] code) {
		this.code = code;
	}

	public void setTmgi(TMGI tmgi) {
		this.tmgi = tmgi;
	}

	public TMGI getTmgi() {
		return tmgi;
	}

	public void setMbmsSessionIdentity(MBMSSessionIdentity mbmsSessionIdentity) {
		this.mbmsSessionIdentity = mbmsSessionIdentity;
	}

	public MBMSSessionIdentity getMbmsSessionIdentity() {
		return mbmsSessionIdentity;
	}

	public void setMbmsServiceType(MBMSServiceType mbmsServiceType) {
		this.mbmsServiceType = mbmsServiceType;
	}

	public MBMSServiceType getMbmsServiceType() {
		return mbmsServiceType;
	}

	public void setMbmsUserServiceType(MBMSUserServiceType mbmsUserServiceType) {
		this.mbmsUserServiceType = mbmsUserServiceType;
	}

	public MBMSUserServiceType getMbmsUserServiceType() {
		return mbmsUserServiceType;
	}

	public void setMbms2G3GIndicator(MBMS2G3GIndicator mbms2G3GIndicator) {
		this.mbms2G3GIndicator = mbms2G3GIndicator;
	}

	public MBMS2G3GIndicator getMbms2G3GIndicator() {
		return mbms2G3GIndicator;
	}

	public void setFileRepairSupported(BerBoolean fileRepairSupported) {
		this.fileRepairSupported = fileRepairSupported;
	}

	public BerBoolean getFileRepairSupported() {
		return fileRepairSupported;
	}

	public void setRAI(RoutingAreaCode rAI) {
		this.rAI = rAI;
	}

	public RoutingAreaCode getRAI() {
		return rAI;
	}

	public void setMbmsServiceArea(MBMSServiceArea mbmsServiceArea) {
		this.mbmsServiceArea = mbmsServiceArea;
	}

	public MBMSServiceArea getMbmsServiceArea() {
		return mbmsServiceArea;
	}

	public void setRequiredMBMSBearerCaps(RequiredMBMSBearerCapabilities requiredMBMSBearerCaps) {
		this.requiredMBMSBearerCaps = requiredMBMSBearerCaps;
	}

	public RequiredMBMSBearerCapabilities getRequiredMBMSBearerCaps() {
		return requiredMBMSBearerCaps;
	}

	public int encode(OutputStream reverseOS) throws IOException {
		return encode(reverseOS, true);
	}

	public int encode(OutputStream reverseOS, boolean withTag) throws IOException {

		if (code != null) {
			for (int i = code.length - 1; i >= 0; i--) {
				reverseOS.write(code[i]);
			}
			if (withTag) {
				return tag.encode(reverseOS) + code.length;
			}
			return code.length;
		}

		int codeLength = 0;
		if (requiredMBMSBearerCaps != null) {
			codeLength += requiredMBMSBearerCaps.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 9
			reverseOS.write(0x89);
			codeLength += 1;
		}
		
		if (mbmsServiceArea != null) {
			codeLength += mbmsServiceArea.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 8
			reverseOS.write(0x88);
			codeLength += 1;
		}
		
		if (rAI != null) {
			codeLength += rAI.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 7
			reverseOS.write(0x87);
			codeLength += 1;
		}
		
		if (fileRepairSupported != null) {
			codeLength += fileRepairSupported.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 6
			reverseOS.write(0x86);
			codeLength += 1;
		}
		
		if (mbms2G3GIndicator != null) {
			codeLength += mbms2G3GIndicator.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 5
			reverseOS.write(0x85);
			codeLength += 1;
		}
		
		codeLength += mbmsUserServiceType.encode(reverseOS, false);
		// write tag: CONTEXT_CLASS, PRIMITIVE, 4
		reverseOS.write(0x84);
		codeLength += 1;
		
		codeLength += mbmsServiceType.encode(reverseOS, false);
		// write tag: CONTEXT_CLASS, PRIMITIVE, 3
		reverseOS.write(0x83);
		codeLength += 1;
		
		if (mbmsSessionIdentity != null) {
			codeLength += mbmsSessionIdentity.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 2
			reverseOS.write(0x82);
			codeLength += 1;
		}
		
		codeLength += tmgi.encode(reverseOS, false);
		// write tag: CONTEXT_CLASS, PRIMITIVE, 1
		reverseOS.write(0x81);
		codeLength += 1;
		
		codeLength += BerLength.encodeLength(reverseOS, codeLength);

		if (withTag) {
			codeLength += tag.encode(reverseOS);
		}

		return codeLength;

	}

	public int decode(InputStream is) throws IOException {
		return decode(is, true);
	}

	public int decode(InputStream is, boolean withTag) throws IOException {
		int codeLength = 0;
		int subCodeLength = 0;
		BerTag berTag = new BerTag();

		if (withTag) {
			codeLength += tag.decodeAndCheck(is);
		}

		BerLength length = new BerLength();
		codeLength += length.decode(is);

		int totalLength = length.val;
		while (subCodeLength < totalLength) {
			subCodeLength += berTag.decode(is);
			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 1)) {
				tmgi = new TMGI();
				subCodeLength += tmgi.decode(is, false);
			}
			else if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 2)) {
				mbmsSessionIdentity = new MBMSSessionIdentity();
				subCodeLength += mbmsSessionIdentity.decode(is, false);
			}
			else if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 3)) {
				mbmsServiceType = new MBMSServiceType();
				subCodeLength += mbmsServiceType.decode(is, false);
			}
			else if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 4)) {
				mbmsUserServiceType = new MBMSUserServiceType();
				subCodeLength += mbmsUserServiceType.decode(is, false);
			}
			else if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 5)) {
				mbms2G3GIndicator = new MBMS2G3GIndicator();
				subCodeLength += mbms2G3GIndicator.decode(is, false);
			}
			else if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 6)) {
				fileRepairSupported = new BerBoolean();
				subCodeLength += fileRepairSupported.decode(is, false);
			}
			else if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 7)) {
				rAI = new RoutingAreaCode();
				subCodeLength += rAI.decode(is, false);
			}
			else if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 8)) {
				mbmsServiceArea = new MBMSServiceArea();
				subCodeLength += mbmsServiceArea.decode(is, false);
			}
			else if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 9)) {
				requiredMBMSBearerCaps = new RequiredMBMSBearerCapabilities();
				subCodeLength += requiredMBMSBearerCaps.decode(is, false);
			}
		}
		if (subCodeLength != totalLength) {
			throw new IOException("Length of set does not match length tag, length tag: " + totalLength + ", actual set length: " + subCodeLength);

		}
		codeLength += subCodeLength;

		return codeLength;
	}

	public void encodeAndSave(int encodingSizeGuess) throws IOException {
		ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
		encode(reverseOS, false);
		code = reverseOS.getArray();
	}

	public String toString() {
		StringBuilder sb = new StringBuilder();
		appendAsString(sb, 0);
		return sb.toString();
	}

	public void appendAsString(StringBuilder sb, int indentLevel) {

		sb.append("{");
		sb.append("\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (tmgi != null) {
			sb.append("tmgi: ").append(tmgi);
		}
		else {
			sb.append("tmgi: <empty-required-field>");
		}
		
		if (mbmsSessionIdentity != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("mbmsSessionIdentity: ").append(mbmsSessionIdentity);
		}
		
		sb.append(",\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (mbmsServiceType != null) {
			sb.append("mbmsServiceType: ").append(mbmsServiceType);
		}
		else {
			sb.append("mbmsServiceType: <empty-required-field>");
		}
		
		sb.append(",\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (mbmsUserServiceType != null) {
			sb.append("mbmsUserServiceType: ").append(mbmsUserServiceType);
		}
		else {
			sb.append("mbmsUserServiceType: <empty-required-field>");
		}
		
		if (mbms2G3GIndicator != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("mbms2G3GIndicator: ").append(mbms2G3GIndicator);
		}
		
		if (fileRepairSupported != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("fileRepairSupported: ").append(fileRepairSupported);
		}
		
		if (rAI != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("rAI: ").append(rAI);
		}
		
		if (mbmsServiceArea != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("mbmsServiceArea: ").append(mbmsServiceArea);
		}
		
		if (requiredMBMSBearerCaps != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("requiredMBMSBearerCaps: ").append(requiredMBMSBearerCaps);
		}
		
		sb.append("\n");
		for (int i = 0; i < indentLevel; i++) {
			sb.append("\t");
		}
		sb.append("}");
	}

}


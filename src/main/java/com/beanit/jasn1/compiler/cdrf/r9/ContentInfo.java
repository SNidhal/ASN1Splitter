/**
 * This class file was automatically generated by jASN1 (http://www.beanit.com)
 */

package com.beanit.jasn1.compiler.cdrf.r9;

import com.beanit.jasn1.ber.BerLength;
import com.beanit.jasn1.ber.BerTag;
import com.beanit.jasn1.ber.ReverseByteArrayOutputStream;
import com.beanit.jasn1.ber.types.BerBoolean;
import com.beanit.jasn1.ber.types.BerInteger;
import com.beanit.jasn1.ber.types.BerOctetString;
import com.beanit.jasn1.ber.types.BerType;

import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.Serializable;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;


public class ContentInfo implements BerType, Serializable {

	private static final long serialVersionUID = 1L;

	public static class ServiceList implements BerType, Serializable {

		private static final long serialVersionUID = 1L;

		public static final BerTag tag = new BerTag(BerTag.UNIVERSAL_CLASS, BerTag.CONSTRUCTED, 16);
		public byte[] code = null;
		private List<ServiceEvent> seqOf = null;

		public ServiceList() {
			seqOf = new ArrayList<ServiceEvent>();
		}

		public ServiceList(byte[] code) {
			this.code = code;
		}

		public List<ServiceEvent> getServiceEvent() {
			if (seqOf == null) {
				seqOf = new ArrayList<ServiceEvent>();
			}
			return seqOf;
		}

		public int encode(OutputStream reverseOS) throws IOException {
			return encode(reverseOS, true);
		}

		public int encode(OutputStream reverseOS, boolean withTag) throws IOException {

			if (code != null) {
				for (int i = code.length - 1; i >= 0; i--) {
					reverseOS.write(code[i]);
				}
				if (withTag) {
					return tag.encode(reverseOS) + code.length;
				}
				return code.length;
			}

			int codeLength = 0;
			for (int i = (seqOf.size() - 1); i >= 0; i--) {
				codeLength += seqOf.get(i).encode(reverseOS, true);
			}

			codeLength += BerLength.encodeLength(reverseOS, codeLength);

			if (withTag) {
				codeLength += tag.encode(reverseOS);
			}

			return codeLength;
		}

		public int decode(InputStream is) throws IOException {
			return decode(is, true);
		}

		public int decode(InputStream is, boolean withTag) throws IOException {
			int codeLength = 0;
			int subCodeLength = 0;
			if (withTag) {
				codeLength += tag.decodeAndCheck(is);
			}

			BerLength length = new BerLength();
			codeLength += length.decode(is);
			int totalLength = length.val;

			while (subCodeLength < totalLength) {
				ServiceEvent element = new ServiceEvent();
				subCodeLength += element.decode(is, true);
				seqOf.add(element);
			}
			if (subCodeLength != totalLength) {
				throw new IOException("Decoded SequenceOf or SetOf has wrong length. Expected " + totalLength + " but has " + subCodeLength);

			}
			codeLength += subCodeLength;

			return codeLength;
		}

		public void encodeAndSave(int encodingSizeGuess) throws IOException {
			ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
			encode(reverseOS, false);
			code = reverseOS.getArray();
		}

		public String toString() {
			StringBuilder sb = new StringBuilder();
			appendAsString(sb, 0);
			return sb.toString();
		}

		public void appendAsString(StringBuilder sb, int indentLevel) {

			sb.append("{\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			if (seqOf == null) {
				sb.append("null");
			}
			else {
				Iterator<ServiceEvent> it = seqOf.iterator();
				if (it.hasNext()) {
					it.next().appendAsString(sb, indentLevel + 1);
					while (it.hasNext()) {
						sb.append(",\n");
						for (int i = 0; i < indentLevel + 1; i++) {
							sb.append("\t");
						}
						it.next().appendAsString(sb, indentLevel + 1);
					}
				}
			}

			sb.append("\n");
			for (int i = 0; i < indentLevel; i++) {
				sb.append("\t");
			}
			sb.append("}");
		}

	}

	public static class ChangeTimeList implements BerType, Serializable {

		private static final long serialVersionUID = 1L;

		public static final BerTag tag = new BerTag(BerTag.UNIVERSAL_CLASS, BerTag.CONSTRUCTED, 16);
		public byte[] code = null;
		private List<ChangeTimeExtension> seqOf = null;

		public ChangeTimeList() {
			seqOf = new ArrayList<ChangeTimeExtension>();
		}

		public ChangeTimeList(byte[] code) {
			this.code = code;
		}

		public List<ChangeTimeExtension> getChangeTimeExtension() {
			if (seqOf == null) {
				seqOf = new ArrayList<ChangeTimeExtension>();
			}
			return seqOf;
		}

		public int encode(OutputStream reverseOS) throws IOException {
			return encode(reverseOS, true);
		}

		public int encode(OutputStream reverseOS, boolean withTag) throws IOException {

			if (code != null) {
				for (int i = code.length - 1; i >= 0; i--) {
					reverseOS.write(code[i]);
				}
				if (withTag) {
					return tag.encode(reverseOS) + code.length;
				}
				return code.length;
			}

			int codeLength = 0;
			for (int i = (seqOf.size() - 1); i >= 0; i--) {
				codeLength += seqOf.get(i).encode(reverseOS, true);
			}

			codeLength += BerLength.encodeLength(reverseOS, codeLength);

			if (withTag) {
				codeLength += tag.encode(reverseOS);
			}

			return codeLength;
		}

		public int decode(InputStream is) throws IOException {
			return decode(is, true);
		}

		public int decode(InputStream is, boolean withTag) throws IOException {
			int codeLength = 0;
			int subCodeLength = 0;
			if (withTag) {
				codeLength += tag.decodeAndCheck(is);
			}

			BerLength length = new BerLength();
			codeLength += length.decode(is);
			int totalLength = length.val;

			while (subCodeLength < totalLength) {
				ChangeTimeExtension element = new ChangeTimeExtension();
				subCodeLength += element.decode(is, true);
				seqOf.add(element);
			}
			if (subCodeLength != totalLength) {
				throw new IOException("Decoded SequenceOf or SetOf has wrong length. Expected " + totalLength + " but has " + subCodeLength);

			}
			codeLength += subCodeLength;

			return codeLength;
		}

		public void encodeAndSave(int encodingSizeGuess) throws IOException {
			ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
			encode(reverseOS, false);
			code = reverseOS.getArray();
		}

		public String toString() {
			StringBuilder sb = new StringBuilder();
			appendAsString(sb, 0);
			return sb.toString();
		}

		public void appendAsString(StringBuilder sb, int indentLevel) {

			sb.append("{\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			if (seqOf == null) {
				sb.append("null");
			}
			else {
				Iterator<ChangeTimeExtension> it = seqOf.iterator();
				if (it.hasNext()) {
					it.next().appendAsString(sb, indentLevel + 1);
					while (it.hasNext()) {
						sb.append(",\n");
						for (int i = 0; i < indentLevel + 1; i++) {
							sb.append("\t");
						}
						it.next().appendAsString(sb, indentLevel + 1);
					}
				}
			}

			sb.append("\n");
			for (int i = 0; i < indentLevel; i++) {
				sb.append("\t");
			}
			sb.append("}");
		}

	}

	public static final BerTag tag = new BerTag(BerTag.UNIVERSAL_CLASS, BerTag.CONSTRUCTED, 16);

	public byte[] code = null;
	private BerInteger extensionType = null;
	private BerInteger length2 = null;
	private ServiceList serviceList = null;
	private ChangeTimeList changeTimeList = null;
	private TimeStampExtension recordOpeningTime = null;
	private CallDurationExtension duration = null;
	private BerOctetString transparentVSA = null;
	private BerBoolean cdrType = null;
	private TimeStamp createTime = null;
	private BerInteger chargingType = null;
	private BerBoolean roaming = null;
	private ProfileID profile = null;
	private BerInteger nsapi = null;
	private TimeStamp lastActivityTimeUpLink = null;
	private TimeStamp lastActivityTimeDownLink = null;
	private BerInteger zoneId = null;
	private BerInteger daylightSavingTime = null;
	private BerInteger localTimeZone = null;
	private BerBoolean sgsnChange = null;
	private ChargingID sessionID = null;
	private BerInteger recordOpeningTimeZone = null;
	private TimeStamp saRecordChangeTime = null;
	private BerInteger saRecordChangeTimeZone = null;
	
	public ContentInfo() {
	}

	public ContentInfo(byte[] code) {
		this.code = code;
	}

	public void setExtensionType(BerInteger extensionType) {
		this.extensionType = extensionType;
	}

	public BerInteger getExtensionType() {
		return extensionType;
	}

	public void setLength(BerInteger length) {
		this.length2 = length;
	}

	public BerInteger getLength() {
		return length2;
	}

	public void setServiceList(ServiceList serviceList) {
		this.serviceList = serviceList;
	}

	public ServiceList getServiceList() {
		return serviceList;
	}

	public void setChangeTimeList(ChangeTimeList changeTimeList) {
		this.changeTimeList = changeTimeList;
	}

	public ChangeTimeList getChangeTimeList() {
		return changeTimeList;
	}

	public void setRecordOpeningTime(TimeStampExtension recordOpeningTime) {
		this.recordOpeningTime = recordOpeningTime;
	}

	public TimeStampExtension getRecordOpeningTime() {
		return recordOpeningTime;
	}

	public void setDuration(CallDurationExtension duration) {
		this.duration = duration;
	}

	public CallDurationExtension getDuration() {
		return duration;
	}

	public void setTransparentVSA(BerOctetString transparentVSA) {
		this.transparentVSA = transparentVSA;
	}

	public BerOctetString getTransparentVSA() {
		return transparentVSA;
	}

	public void setCdrType(BerBoolean cdrType) {
		this.cdrType = cdrType;
	}

	public BerBoolean getCdrType() {
		return cdrType;
	}

	public void setCreateTime(TimeStamp createTime) {
		this.createTime = createTime;
	}

	public TimeStamp getCreateTime() {
		return createTime;
	}

	public void setChargingType(BerInteger chargingType) {
		this.chargingType = chargingType;
	}

	public BerInteger getChargingType() {
		return chargingType;
	}

	public void setRoaming(BerBoolean roaming) {
		this.roaming = roaming;
	}

	public BerBoolean getRoaming() {
		return roaming;
	}

	public void setProfile(ProfileID profile) {
		this.profile = profile;
	}

	public ProfileID getProfile() {
		return profile;
	}

	public void setNsapi(BerInteger nsapi) {
		this.nsapi = nsapi;
	}

	public BerInteger getNsapi() {
		return nsapi;
	}

	public void setLastActivityTimeUpLink(TimeStamp lastActivityTimeUpLink) {
		this.lastActivityTimeUpLink = lastActivityTimeUpLink;
	}

	public TimeStamp getLastActivityTimeUpLink() {
		return lastActivityTimeUpLink;
	}

	public void setLastActivityTimeDownLink(TimeStamp lastActivityTimeDownLink) {
		this.lastActivityTimeDownLink = lastActivityTimeDownLink;
	}

	public TimeStamp getLastActivityTimeDownLink() {
		return lastActivityTimeDownLink;
	}

	public void setZoneId(BerInteger zoneId) {
		this.zoneId = zoneId;
	}

	public BerInteger getZoneId() {
		return zoneId;
	}

	public void setDaylightSavingTime(BerInteger daylightSavingTime) {
		this.daylightSavingTime = daylightSavingTime;
	}

	public BerInteger getDaylightSavingTime() {
		return daylightSavingTime;
	}

	public void setLocalTimeZone(BerInteger localTimeZone) {
		this.localTimeZone = localTimeZone;
	}

	public BerInteger getLocalTimeZone() {
		return localTimeZone;
	}

	public void setSgsnChange(BerBoolean sgsnChange) {
		this.sgsnChange = sgsnChange;
	}

	public BerBoolean getSgsnChange() {
		return sgsnChange;
	}

	public void setSessionID(ChargingID sessionID) {
		this.sessionID = sessionID;
	}

	public ChargingID getSessionID() {
		return sessionID;
	}

	public void setRecordOpeningTimeZone(BerInteger recordOpeningTimeZone) {
		this.recordOpeningTimeZone = recordOpeningTimeZone;
	}

	public BerInteger getRecordOpeningTimeZone() {
		return recordOpeningTimeZone;
	}

	public void setSaRecordChangeTime(TimeStamp saRecordChangeTime) {
		this.saRecordChangeTime = saRecordChangeTime;
	}

	public TimeStamp getSaRecordChangeTime() {
		return saRecordChangeTime;
	}

	public void setSaRecordChangeTimeZone(BerInteger saRecordChangeTimeZone) {
		this.saRecordChangeTimeZone = saRecordChangeTimeZone;
	}

	public BerInteger getSaRecordChangeTimeZone() {
		return saRecordChangeTimeZone;
	}

	public int encode(OutputStream reverseOS) throws IOException {
		return encode(reverseOS, true);
	}

	public int encode(OutputStream reverseOS, boolean withTag) throws IOException {

		if (code != null) {
			for (int i = code.length - 1; i >= 0; i--) {
				reverseOS.write(code[i]);
			}
			if (withTag) {
				return tag.encode(reverseOS) + code.length;
			}
			return code.length;
		}

		int codeLength = 0;
		if (saRecordChangeTimeZone != null) {
			codeLength += saRecordChangeTimeZone.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 22
			reverseOS.write(0x96);
			codeLength += 1;
		}
		
		if (saRecordChangeTime != null) {
			codeLength += saRecordChangeTime.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 21
			reverseOS.write(0x95);
			codeLength += 1;
		}
		
		if (recordOpeningTimeZone != null) {
			codeLength += recordOpeningTimeZone.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 20
			reverseOS.write(0x94);
			codeLength += 1;
		}
		
		if (sessionID != null) {
			codeLength += sessionID.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 19
			reverseOS.write(0x93);
			codeLength += 1;
		}
		
		if (sgsnChange != null) {
			codeLength += sgsnChange.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 18
			reverseOS.write(0x92);
			codeLength += 1;
		}
		
		if (localTimeZone != null) {
			codeLength += localTimeZone.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 17
			reverseOS.write(0x91);
			codeLength += 1;
		}
		
		if (daylightSavingTime != null) {
			codeLength += daylightSavingTime.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 16
			reverseOS.write(0x90);
			codeLength += 1;
		}
		
		if (zoneId != null) {
			codeLength += zoneId.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 15
			reverseOS.write(0x8F);
			codeLength += 1;
		}
		
		if (lastActivityTimeDownLink != null) {
			codeLength += lastActivityTimeDownLink.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 14
			reverseOS.write(0x8E);
			codeLength += 1;
		}
		
		if (lastActivityTimeUpLink != null) {
			codeLength += lastActivityTimeUpLink.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 13
			reverseOS.write(0x8D);
			codeLength += 1;
		}
		
		if (nsapi != null) {
			codeLength += nsapi.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 12
			reverseOS.write(0x8C);
			codeLength += 1;
		}
		
		if (profile != null) {
			codeLength += profile.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 11
			reverseOS.write(0x8B);
			codeLength += 1;
		}
		
		if (roaming != null) {
			codeLength += roaming.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 10
			reverseOS.write(0x8A);
			codeLength += 1;
		}
		
		if (chargingType != null) {
			codeLength += chargingType.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 9
			reverseOS.write(0x89);
			codeLength += 1;
		}
		
		if (createTime != null) {
			codeLength += createTime.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 8
			reverseOS.write(0x88);
			codeLength += 1;
		}
		
		if (cdrType != null) {
			codeLength += cdrType.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 7
			reverseOS.write(0x87);
			codeLength += 1;
		}
		
		if (transparentVSA != null) {
			codeLength += transparentVSA.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 6
			reverseOS.write(0x86);
			codeLength += 1;
		}
		
		if (duration != null) {
			codeLength += duration.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 5
			reverseOS.write(0x85);
			codeLength += 1;
		}
		
		if (recordOpeningTime != null) {
			codeLength += recordOpeningTime.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 4
			reverseOS.write(0x84);
			codeLength += 1;
		}
		
		if (changeTimeList != null) {
			codeLength += changeTimeList.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 3
			reverseOS.write(0xA3);
			codeLength += 1;
		}
		
		if (serviceList != null) {
			codeLength += serviceList.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 2
			reverseOS.write(0xA2);
			codeLength += 1;
		}
		
		codeLength += length2.encode(reverseOS, false);
		// write tag: CONTEXT_CLASS, PRIMITIVE, 1
		reverseOS.write(0x81);
		codeLength += 1;
		
		codeLength += extensionType.encode(reverseOS, false);
		// write tag: CONTEXT_CLASS, PRIMITIVE, 0
		reverseOS.write(0x80);
		codeLength += 1;
		
		codeLength += BerLength.encodeLength(reverseOS, codeLength);

		if (withTag) {
			codeLength += tag.encode(reverseOS);
		}

		return codeLength;

	}

	public int decode(InputStream is) throws IOException {
		return decode(is, true);
	}

	public int decode(InputStream is, boolean withTag) throws IOException {
		int codeLength = 0;
		int subCodeLength = 0;
		BerTag berTag = new BerTag();

		if (withTag) {
			codeLength += tag.decodeAndCheck(is);
		}

		BerLength length = new BerLength();
		codeLength += length.decode(is);

		int totalLength = length.val;
		codeLength += totalLength;

		subCodeLength += berTag.decode(is);
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 0)) {
			extensionType = new BerInteger();
			subCodeLength += extensionType.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match the mandatory sequence element tag.");
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 1)) {
			length2 = new BerInteger();
			subCodeLength += length2.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match the mandatory sequence element tag.");
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 2)) {
			serviceList = new ServiceList();
			subCodeLength += serviceList.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 3)) {
			changeTimeList = new ChangeTimeList();
			subCodeLength += changeTimeList.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 4)) {
			recordOpeningTime = new TimeStampExtension();
			subCodeLength += recordOpeningTime.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 5)) {
			duration = new CallDurationExtension();
			subCodeLength += duration.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 6)) {
			transparentVSA = new BerOctetString();
			subCodeLength += transparentVSA.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 7)) {
			cdrType = new BerBoolean();
			subCodeLength += cdrType.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 8)) {
			createTime = new TimeStamp();
			subCodeLength += createTime.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 9)) {
			chargingType = new BerInteger();
			subCodeLength += chargingType.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 10)) {
			roaming = new BerBoolean();
			subCodeLength += roaming.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 11)) {
			profile = new ProfileID();
			subCodeLength += profile.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 12)) {
			nsapi = new BerInteger();
			subCodeLength += nsapi.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 13)) {
			lastActivityTimeUpLink = new TimeStamp();
			subCodeLength += lastActivityTimeUpLink.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 14)) {
			lastActivityTimeDownLink = new TimeStamp();
			subCodeLength += lastActivityTimeDownLink.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 15)) {
			zoneId = new BerInteger();
			subCodeLength += zoneId.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 16)) {
			daylightSavingTime = new BerInteger();
			subCodeLength += daylightSavingTime.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 17)) {
			localTimeZone = new BerInteger();
			subCodeLength += localTimeZone.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 18)) {
			sgsnChange = new BerBoolean();
			subCodeLength += sgsnChange.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 19)) {
			sessionID = new ChargingID();
			subCodeLength += sessionID.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 20)) {
			recordOpeningTimeZone = new BerInteger();
			subCodeLength += recordOpeningTimeZone.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 21)) {
			saRecordChangeTime = new TimeStamp();
			subCodeLength += saRecordChangeTime.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 22)) {
			saRecordChangeTimeZone = new BerInteger();
			subCodeLength += saRecordChangeTimeZone.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
		}
		throw new IOException("Unexpected end of sequence, length tag: " + totalLength + ", actual sequence length: " + subCodeLength);

		
	}

	public void encodeAndSave(int encodingSizeGuess) throws IOException {
		ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
		encode(reverseOS, false);
		code = reverseOS.getArray();
	}

	public String toString() {
		StringBuilder sb = new StringBuilder();
		appendAsString(sb, 0);
		return sb.toString();
	}

	public void appendAsString(StringBuilder sb, int indentLevel) {

		sb.append("{");
		sb.append("\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (extensionType != null) {
			sb.append("extensionType: ").append(extensionType);
		}
		else {
			sb.append("extensionType: <empty-required-field>");
		}
		
		sb.append(",\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (length2 != null) {
			sb.append("length: ").append(length2);
		}
		else {
			sb.append("length: <empty-required-field>");
		}
		
		if (serviceList != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("serviceList: ");
			serviceList.appendAsString(sb, indentLevel + 1);
		}
		
		if (changeTimeList != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("changeTimeList: ");
			changeTimeList.appendAsString(sb, indentLevel + 1);
		}
		
		if (recordOpeningTime != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("recordOpeningTime: ").append(recordOpeningTime);
		}
		
		if (duration != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("duration: ").append(duration);
		}
		
		if (transparentVSA != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("transparentVSA: ").append(transparentVSA);
		}
		
		if (cdrType != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("cdrType: ").append(cdrType);
		}
		
		if (createTime != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("createTime: ").append(createTime);
		}
		
		if (chargingType != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("chargingType: ").append(chargingType);
		}
		
		if (roaming != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("roaming: ").append(roaming);
		}
		
		if (profile != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("profile: ").append(profile);
		}
		
		if (nsapi != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("nsapi: ").append(nsapi);
		}
		
		if (lastActivityTimeUpLink != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("lastActivityTimeUpLink: ").append(lastActivityTimeUpLink);
		}
		
		if (lastActivityTimeDownLink != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("lastActivityTimeDownLink: ").append(lastActivityTimeDownLink);
		}
		
		if (zoneId != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("zoneId: ").append(zoneId);
		}
		
		if (daylightSavingTime != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("daylightSavingTime: ").append(daylightSavingTime);
		}
		
		if (localTimeZone != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("localTimeZone: ").append(localTimeZone);
		}
		
		if (sgsnChange != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("sgsnChange: ").append(sgsnChange);
		}
		
		if (sessionID != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("sessionID: ").append(sessionID);
		}
		
		if (recordOpeningTimeZone != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("recordOpeningTimeZone: ").append(recordOpeningTimeZone);
		}
		
		if (saRecordChangeTime != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("saRecordChangeTime: ").append(saRecordChangeTime);
		}
		
		if (saRecordChangeTimeZone != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("saRecordChangeTimeZone: ").append(saRecordChangeTimeZone);
		}
		
		sb.append("\n");
		for (int i = 0; i < indentLevel; i++) {
			sb.append("\t");
		}
		sb.append("}");
	}

}


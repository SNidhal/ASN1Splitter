/**
 * This class file was automatically generated by jASN1 (http://www.beanit.com)
 */

package com.beanit.jasn1.compiler.cdrf.r9;

import com.beanit.jasn1.ber.BerLength;
import com.beanit.jasn1.ber.BerTag;
import com.beanit.jasn1.ber.ReverseByteArrayOutputStream;
import com.beanit.jasn1.ber.types.BerOctetString;
import com.beanit.jasn1.ber.types.BerType;

import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.Serializable;


public class ChangeOfCharCondition implements BerType, Serializable {

	private static final long serialVersionUID = 1L;

	public static final BerTag tag = new BerTag(BerTag.UNIVERSAL_CLASS, BerTag.CONSTRUCTED, 16);

	public byte[] code = null;
	private QoSInformation qosRequested = null;
	private QoSInformation qosNegotiated = null;
	private DataVolumeGPRS dataVolumeGPRSUplink = null;
	private DataVolumeGPRS dataVolumeGPRSDownlink = null;
	private ChangeCondition changeCondition = null;
	private TimeStamp changeTime = null;
	private FailureHandlingContinue failureHandlingContinue = null;
	private BerOctetString userLocationInformation = null;
	private EPCQoSInformation ePCQoSInformation = null;
	
	public ChangeOfCharCondition() {
	}

	public ChangeOfCharCondition(byte[] code) {
		this.code = code;
	}

	public void setQosRequested(QoSInformation qosRequested) {
		this.qosRequested = qosRequested;
	}

	public QoSInformation getQosRequested() {
		return qosRequested;
	}

	public void setQosNegotiated(QoSInformation qosNegotiated) {
		this.qosNegotiated = qosNegotiated;
	}

	public QoSInformation getQosNegotiated() {
		return qosNegotiated;
	}

	public void setDataVolumeGPRSUplink(DataVolumeGPRS dataVolumeGPRSUplink) {
		this.dataVolumeGPRSUplink = dataVolumeGPRSUplink;
	}

	public DataVolumeGPRS getDataVolumeGPRSUplink() {
		return dataVolumeGPRSUplink;
	}

	public void setDataVolumeGPRSDownlink(DataVolumeGPRS dataVolumeGPRSDownlink) {
		this.dataVolumeGPRSDownlink = dataVolumeGPRSDownlink;
	}

	public DataVolumeGPRS getDataVolumeGPRSDownlink() {
		return dataVolumeGPRSDownlink;
	}

	public void setChangeCondition(ChangeCondition changeCondition) {
		this.changeCondition = changeCondition;
	}

	public ChangeCondition getChangeCondition() {
		return changeCondition;
	}

	public void setChangeTime(TimeStamp changeTime) {
		this.changeTime = changeTime;
	}

	public TimeStamp getChangeTime() {
		return changeTime;
	}

	public void setFailureHandlingContinue(FailureHandlingContinue failureHandlingContinue) {
		this.failureHandlingContinue = failureHandlingContinue;
	}

	public FailureHandlingContinue getFailureHandlingContinue() {
		return failureHandlingContinue;
	}

	public void setUserLocationInformation(BerOctetString userLocationInformation) {
		this.userLocationInformation = userLocationInformation;
	}

	public BerOctetString getUserLocationInformation() {
		return userLocationInformation;
	}

	public void setEPCQoSInformation(EPCQoSInformation ePCQoSInformation) {
		this.ePCQoSInformation = ePCQoSInformation;
	}

	public EPCQoSInformation getEPCQoSInformation() {
		return ePCQoSInformation;
	}

	public int encode(OutputStream reverseOS) throws IOException {
		return encode(reverseOS, true);
	}

	public int encode(OutputStream reverseOS, boolean withTag) throws IOException {

		if (code != null) {
			for (int i = code.length - 1; i >= 0; i--) {
				reverseOS.write(code[i]);
			}
			if (withTag) {
				return tag.encode(reverseOS) + code.length;
			}
			return code.length;
		}

		int codeLength = 0;
		if (ePCQoSInformation != null) {
			codeLength += ePCQoSInformation.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 9
			reverseOS.write(0xA9);
			codeLength += 1;
		}
		
		if (userLocationInformation != null) {
			codeLength += userLocationInformation.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 8
			reverseOS.write(0x88);
			codeLength += 1;
		}
		
		if (failureHandlingContinue != null) {
			codeLength += failureHandlingContinue.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 7
			reverseOS.write(0x87);
			codeLength += 1;
		}
		
		codeLength += changeTime.encode(reverseOS, false);
		// write tag: CONTEXT_CLASS, PRIMITIVE, 6
		reverseOS.write(0x86);
		codeLength += 1;
		
		codeLength += changeCondition.encode(reverseOS, false);
		// write tag: CONTEXT_CLASS, PRIMITIVE, 5
		reverseOS.write(0x85);
		codeLength += 1;
		
		if (dataVolumeGPRSDownlink != null) {
			codeLength += dataVolumeGPRSDownlink.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 4
			reverseOS.write(0x84);
			codeLength += 1;
		}
		
		if (dataVolumeGPRSUplink != null) {
			codeLength += dataVolumeGPRSUplink.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 3
			reverseOS.write(0x83);
			codeLength += 1;
		}
		
		if (qosNegotiated != null) {
			codeLength += qosNegotiated.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 2
			reverseOS.write(0x82);
			codeLength += 1;
		}
		
		if (qosRequested != null) {
			codeLength += qosRequested.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 1
			reverseOS.write(0x81);
			codeLength += 1;
		}
		
		codeLength += BerLength.encodeLength(reverseOS, codeLength);

		if (withTag) {
			codeLength += tag.encode(reverseOS);
		}

		return codeLength;

	}

	public int decode(InputStream is) throws IOException {
		return decode(is, true);
	}

	public int decode(InputStream is, boolean withTag) throws IOException {
		int codeLength = 0;
		int subCodeLength = 0;
		BerTag berTag = new BerTag();

		if (withTag) {
			codeLength += tag.decodeAndCheck(is);
		}

		BerLength length = new BerLength();
		codeLength += length.decode(is);

		int totalLength = length.val;
		codeLength += totalLength;

		subCodeLength += berTag.decode(is);
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 1)) {
			qosRequested = new QoSInformation();
			subCodeLength += qosRequested.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 2)) {
			qosNegotiated = new QoSInformation();
			subCodeLength += qosNegotiated.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 3)) {
			dataVolumeGPRSUplink = new DataVolumeGPRS();
			subCodeLength += dataVolumeGPRSUplink.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 4)) {
			dataVolumeGPRSDownlink = new DataVolumeGPRS();
			subCodeLength += dataVolumeGPRSDownlink.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 5)) {
			changeCondition = new ChangeCondition();
			subCodeLength += changeCondition.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match the mandatory sequence element tag.");
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 6)) {
			changeTime = new TimeStamp();
			subCodeLength += changeTime.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match the mandatory sequence element tag.");
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 7)) {
			failureHandlingContinue = new FailureHandlingContinue();
			subCodeLength += failureHandlingContinue.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 8)) {
			userLocationInformation = new BerOctetString();
			subCodeLength += userLocationInformation.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 9)) {
			ePCQoSInformation = new EPCQoSInformation();
			subCodeLength += ePCQoSInformation.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
		}
		throw new IOException("Unexpected end of sequence, length tag: " + totalLength + ", actual sequence length: " + subCodeLength);

		
	}

	public void encodeAndSave(int encodingSizeGuess) throws IOException {
		ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
		encode(reverseOS, false);
		code = reverseOS.getArray();
	}

	public String toString() {
		StringBuilder sb = new StringBuilder();
		appendAsString(sb, 0);
		return sb.toString();
	}

	public void appendAsString(StringBuilder sb, int indentLevel) {

		sb.append("{");
		boolean firstSelectedElement = true;
		if (qosRequested != null) {
			sb.append("\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("qosRequested: ").append(qosRequested);
			firstSelectedElement = false;
		}
		
		if (qosNegotiated != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("qosNegotiated: ").append(qosNegotiated);
			firstSelectedElement = false;
		}
		
		if (dataVolumeGPRSUplink != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("dataVolumeGPRSUplink: ").append(dataVolumeGPRSUplink);
			firstSelectedElement = false;
		}
		
		if (dataVolumeGPRSDownlink != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("dataVolumeGPRSDownlink: ").append(dataVolumeGPRSDownlink);
			firstSelectedElement = false;
		}
		
		if (!firstSelectedElement) {
			sb.append(",\n");
		}
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (changeCondition != null) {
			sb.append("changeCondition: ").append(changeCondition);
		}
		else {
			sb.append("changeCondition: <empty-required-field>");
		}
		
		sb.append(",\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (changeTime != null) {
			sb.append("changeTime: ").append(changeTime);
		}
		else {
			sb.append("changeTime: <empty-required-field>");
		}
		
		if (failureHandlingContinue != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("failureHandlingContinue: ").append(failureHandlingContinue);
		}
		
		if (userLocationInformation != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("userLocationInformation: ").append(userLocationInformation);
		}
		
		if (ePCQoSInformation != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("ePCQoSInformation: ");
			ePCQoSInformation.appendAsString(sb, indentLevel + 1);
		}
		
		sb.append("\n");
		for (int i = 0; i < indentLevel; i++) {
			sb.append("\t");
		}
		sb.append("}");
	}

}

